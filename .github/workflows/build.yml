name: ili2c bindings

on: 
  push:
    paths-ignore:
      - '**.md'
  workflow_dispatch:

jobs:

  build:  
    name: 'Build on ${{ matrix.os }}'
    strategy:
      fail-fast: true
      matrix:
        # https://github.com/actions/runner-images
        #os: [ ubuntu-24.04, macos-14, windows-2022 ]
        os: [ macos-14, macos-13 ]
        include:
          # - os: 'ubuntu-24.04'
          #   plat-name: 'linux-x64'
          - os: 'macos-14'
            plat-name: 'darwin-arm64'
          - os: 'macos-13'
            plat-name: 'darwin-x64'
          # - os: 'windows-2022'
          #   plat-name: 'win32-x64'

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      - name: 'Add Developer Command Prompt for Microsoft Visual C++'
        if: ${{ runner.os == 'Windows' }}
        uses: ilammy/msvc-dev-cmd@v1

      - uses: graalvm/setup-graalvm@v1
        with:
          java-version: '21'
          distribution: 'graalvm'
          cache: 'gradle'
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Build native image
        id: buildNative
        shell: bash
        run: |
          cd java-lib
          ./gradlew clean nativeCompile
          ls -la build/native/nativeCompile/

      - uses: actions/upload-artifact@v4
        if: ${{ failure() }}
        with:
          name: reports-native
          path: java-lib/build/reports/tests/

      - uses: actions/setup-node@v4
        with:
          node-version: '22.x'

      ## TODO test!!!
      - name: Build node module
        id: buildNodeModule
        shell: bash
        run: |
          cd module
          ls -la lib_ext
          npm ci
          npx prebuildify --napi --strip --target 22.0.0
          ls -la prebuilds

      - name: 'Fix dylib look up'
        if: ${{ runner.os == 'macOS' }}
        shell: bash
        run: |
          cd module/prebuilds/${{matrix.plat-name}}
          install_name_tool -change /Users/runner/work/ili2c-node/ili2c-node/java-lib/build/native/nativeCompile/libili2c.dylib @loader_path/libili2c.dylib ili2c.node
          otool -L ili2c.node

      - name: 'Upload build artifact'
        if: ${{ success() }}
        uses: actions/upload-artifact@v4
        with:
          name: prebuild-${{matrix.plat-name}}
          path: module/prebuilds/**


  publish:
    name: Collect artifacts and publish to npm
    needs: build
    runs-on: ubuntu-latest

    steps:

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download prebuild artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: prebuild-*
          path: ./artifacts

      - name: Merge prebuilds into package folder
        shell: bash
        run: |
          set -e
          cd module
          rm binding.gyp
          rm -rf src
          mkdir -p prebuilds
          cp -r /home/runner/work/ili2c-node/ili2c-node/artifacts/prebuild-darwin-arm64/darwin-arm64 ./prebuilds/darwin-arm64
          #cp ./prebuilds/darwin-arm64/ili2c.node ./prebuilds/darwin-arm64/ili2caddon.node 
          ls -la ./prebuilds/
          ls -la ./prebuilds/darwin-arm64

      - name: List resulting prebuilds
        shell: bash
        run: |
          cd module
          echo "=== prebuilds ==="
          find prebuilds -type f | sort

      - uses: actions/setup-node@v4
        with:
          node-version: '22.x'
          registry-url: "https://registry.npmjs.org"

      - name: 'Create local package (just for debugging)'
        shell: bash
        run: |
          cd module
          npm pack
          ls -la

      - name: Authenticate with npm
        run: npm config set //registry.npmjs.org/:_authToken ${{ secrets.NPM_TOKEN }}

      - name: Publish
        shell: bash
        run: | 
          cd module
          npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  # release:
  #   needs: [build]

  #   runs-on: ubuntu-24.04

  #   steps:

  #     - name: 'Check out repository'
  #       uses: actions/checkout@v4
  #       with:
  #         ref: ${{ steps.head.outputs.content }}
  #         fetch-depth: 0

  #     - name: 'Download all build artifacts'
  #       uses: actions/download-artifact@v4

  #     - name: 'List artifacts'
  #       shell: bash
  #       run: |
  #         ls -la /home/runner/work/ili2c-node/ili2c-node/
  #         mkdir -p module/prebuilds
  #         mv lib-darwin-arm64 module/prebuilds/darwin-arm64
  #         mv lib-linux-x64 module/prebuilds/linux-x64
  #         mv lib-win32-x64 module/prebuilds/win32-x64
  #         ls -la /home/runner/work/ili2c-node/ili2c-node/module/prebuilds

  #     - uses: actions/setup-node@v4
  #       with:
  #         node-version: '22.x'
  #         registry-url: "https://registry.npmjs.org"

  #     - name: 'Create local package (just for debugging)'
  #       shell: bash
  #       run: |
  #         cd module
  #         npm pack
  #         ls -la

  #     - name: Authenticate with npm
  #       run: npm config set //registry.npmjs.org/:_authToken ${{ secrets.NPM_TOKEN }}

  #     - name: Publish
  #       shell: bash
  #       run: | 
  #         cd module
  #         npm publish
  #       env:
  #         NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  #     - uses: actions/setup-python@v4
  #       with:
  #         python-version: '3.8'
  #         #cache: 'pip' 
        
  #     - name: Install Python requirements
  #       if: always() && (steps.buildNative.outcome == 'success')
  #       run: python -m pip install --upgrade setuptools wheel

  #     - name: Build Python source package
  #       if: always() && (steps.buildNative.outcome == 'success') && runner.os == 'Linux'
  #       run: python setup.py sdist

  #     - name: Build Python package
  #       if: always() && (steps.buildNative.outcome == 'success')
  #       run: python setup.py bdist_wheel --plat-name=${{matrix.plat-name}}

  #     - name: Test Package on Linux and macOS
  #       if: ${{ success() && runner.os != 'Windows' }}
  #       run: |
  #         python -m venv venv
  #         source venv/bin/activate
  #         pip install -e .[test]
  #         pytest ilivalidator
  #       shell: bash

  #     - name: Test package on Windows
  #       if: ${{ success() && runner.os == 'Windows' }}
  #       run: |
  #         python -m venv venv
  #         venv\Scripts\Activate.ps1
  #         pip install -e .[test]
  #         pytest ilivalidator

  #     - name: 'Upload build artifact'
  #       #if: always() && (steps.buildNative.outcome == 'success')
  #       if: ${{ success() }}
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: artifacts
  #         path: |
  #           dist/

  # release:
  #   needs: [build, build-arm]
  #   #needs: [build-arm]
  #   runs-on: ubuntu-22.04
  #   steps:

  #     - name: 'Check out repository'
  #       uses: actions/checkout@v2
  #       with:
  #         ref: ${{ steps.head.outputs.content }}
  #         fetch-depth: 0

  #     - name: 'Download all build artifacts'
  #       uses: actions/download-artifact@v2

  #     - name: 'List artifacts'
  #       run: |
  #         ls -la /home/runner/work/ilivalidator/ilivalidator/artifacts
  #         ls -la /home/runner/work/ilivalidator/ilivalidator/

  #     - name: Publish package to TestPyPI
  #       uses: pypa/gh-action-pypi-publish@release/v1
  #       with:
  #         password: ${{ secrets.PYPI_API_TOKEN }}
  #         #password: ${{ secrets.PYPI_TEST_API_TOKEN }}
  #         #repository_url: https://test.pypi.org/legacy/
  #         packages_dir: artifacts/
